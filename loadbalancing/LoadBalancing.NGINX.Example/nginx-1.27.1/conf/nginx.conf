worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    upstream servers {
        # default -> round robin: sıralı
        # least_conn; gelen isteği, az sayıda etkin bağlantıya sahip sunucuya gönderir
        # ip_hash; aynı adresten gelen istekleyi aynı sunucuya yönlendirir
        # weighted round robin: yüzdelik
        #   server localhost:5054 weight=3;
        #   server localhost:5055 weight=2;
        #   server localhost:5056 weight=1;
        #   server localhost:5056 backup; -> backup ile işaretlenmiş olan 1073 ise diğer iki sunucu kullanılmadığı sürece istek alamayacak demektir.
        #   server localhost:5056 slow_start=30s; -> bu özellik ile yeniden başlatılan sunuculara gelecek olan trafiği kademeli olarak artırabiliyoruz. Böylece sunucunun aşırı yüklenmesinin önüne geçmiş oluyoruz ve sistemin daha kararlı çalışmasını sağlamış oluyoruz
        # generic hash: isteğin gönderileceği sunucu herhangi bir metin dizesi, değişken yahut kombinasyonel bir değerle belirlenmektedir.
        #   hash $request_uri consistent;
        # least_time header; (header -> sunucudan ilk byte'ı alma zamanını ifade eder): gelen isteği en düşük ortalama gecikme değerine sahip olan sunucuya yönlendirir
        # least_time last_byte; (last_byte -> sunucudan tam yanıt alma zamanını ifade eder)
        # least_time last_byte inflight; -> Time to receive the full response from the server, taking into account incomplete requests
        # random two least_time=last_byte; -> least_time = last_byte, sunucudan tam yanıt almak için en düşük ortalama süreyi ifade eder. Eğer ki two parametresi belirtilirse öncelikli rastgele iki sunucu dikkate alınır.
        server localhost:5056;
        server localhost:5054;
        server localhost:5055;
        server localhost:5056;

        # Enabling Session Persistence

        ## Sticky Cookie, gelen ilk isteğe bir oturum tanımlama bilgisi ekler ve böylece sunucuyu tanımlar, client, yapacağı bir sonraki istekte tanımlama bilgisi içerir ve istek eşleşen sunucuya yönlendirilir
        ## srv_id parametresi, tanımlama bilgisinin adını belirlemektedir.
        ## expires parametresi ise tarayıcının cookie'yi tutma süresini ifade eder.
        ## domain parametresi, tanımlama bilgisinin ayarlandığı etki alanını tanımlamaktadır. Opsiyoneldir
        # sticky cookie srv_id expires=1h domain=.example.com path=/;

        ## Sticky Route, gelen ilk istek alındığında client'a bir rota verilir. Sonraki tüm istekler, route parametresiyle karşılaştırılarak eşleşen sunucuya yönlendirilir. 
        # sticky route $route_cookie $route_uri;

        ## Sticky Learn, gelen istek neticesinde yanıtları inceleyerek hangi sunucuya yönlendirilebileceğini öğrenen yöntemdir.
        # sticky learn
        #     create=$upstream_cookie_examplecookie
        #     lookup=$cookie_examplecookie
        #     zone=client_sessions:1m
        #     timeout=1h;

        # Limiting Connection Amount
        ## -> max conns değeri dolduğu taktirde queue değeri kadar sıraya alınır.
        ## -> queue, isteklerle dolduğu taktirde veya istek neticesinde sunucu seçimi timeout değeri kadar zaman aşımına uğradığında client'a bir hata gönderilir
        # server 127.0.0.1:1071 max_conns=3; 
        # server 127.0.0.1:1072;
        # queue 100 timeout=70;

        # Health Check

        ## Passive Health Check
        # Bu ifade gelen isteğin yönlendirilmesi neticesinde sunucudan alınan tepkiye göre kontrollerin yapılmasını ifade etmektedir.

        # server 127.0.0.1:1071 max_fails=3 fail_timeout=30s;

        # fail_timeout parametresiile sunucunun kullanılamaz olarak işaretlenmesi için ne kadar sürelik başarısız girişimin gerçekleşmesi gerektiğini ve aynı zamanda sunucunun uygun değil larak işaretlendiği süreyi ayarlamaktayız. Bu süre varsayılan olarak 10 saniyedir. Örnekte 30 sn olarak yapılandırılmıştır.
        # max_fails parametresi ise sunucunun kullanılamıyor olarak işaretlenmesi için gereken süre boyunca gerçekleşmesi gereken başarısız denemelerin sayısını ayarlamamızı sağlamaktadır.
        # -> yani bu örnekte 30 saniye içerisinde 3 kez yanıt alınamazsa sunucu kullanılamaz olarak işaretlenecektir.

        ## Active Health Check
        # Ayrıca, Nginx'de her sunucuya özel bir denetim isteği göndererek, önceden bir denetleme yapan ve sunucu durumlarını düzenli kontrol eden Aktif Sağlık Kontrolü de mevcuttur. Bunun için health_check etiketinin location etiketi altında kullanılması gerekir
    }

    server {
        listen 8080;
        server_name localhost;

        location / {
            proxy_pass http://servers;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            health_check;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }
    }
}